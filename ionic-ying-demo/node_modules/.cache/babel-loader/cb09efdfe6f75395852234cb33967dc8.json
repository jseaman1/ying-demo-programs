{"ast":null,"code":"var _jsxFileName = \"/Users/joshseaman/Desktop/YING DEMO/ionic-ying-demo/src/components/InputField.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputField = props => {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: props.newItemSubmitHandler,\n    className: \"todoInput\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"input\",\n      type: \"text\",\n      onChange: props.handleItemInput,\n      value: props.pendingItem,\n      placeholder: \"Add an item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      name: \"submit\",\n      value: \"submit\",\n      children: \"add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = InputField;\nexport default InputField; // const [input, setInput] = useState('');\n// const [tasks, setTasks] = useState([]);\n// // functions are usually camel cased in JS\n// // and you shouldnt name the parameter input, when theres another variable called input               \n// function handleNewTaskInput(newInput: string) {\n//     setInput(newInput);\n// }\n// function handleNewTask() {\n//     // you wanna use a immutable array method like .concat which returns a new array\n//     // you should always pass new values to state updaters\n//     setTasks(tasks.concat(input));\n//     // this is going to log the old array before you updated it\n//     // since state updates in react dont happen immediately \n//     console.log(tasks); \n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["/Users/joshseaman/Desktop/YING DEMO/ionic-ying-demo/src/components/InputField.tsx"],"names":["React","InputField","props","newItemSubmitHandler","handleItemInput","pendingItem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEE,MAAMC,UAAU,GAAIC,KAAD,IAAkO;AACnP,sBACI;AACA,IAAA,QAAQ,EAAEA,KAAK,CAACC,oBADhB;AAEA,IAAA,SAAS,EAAC,WAFV;AAAA,4BAGA;AACE,MAAA,SAAS,EAAC,OADZ;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,QAAQ,EAAED,KAAK,CAACE,eAHlB;AAIE,MAAA,KAAK,EAAEF,KAAK,CAACG,WAJf;AAKE,MAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,YAHA,eAUF;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,IAAI,EAAC,QAA3B;AAAoC,MAAA,KAAK,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVE;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAjBC;;KAAMJ,U;AAmBR,eAAeA,UAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\n\n  const InputField = (props: { newItemSubmitHandler: React.FormEventHandler<HTMLFormElement> | undefined; handleItemInput: React.ChangeEventHandler<HTMLInputElement> | undefined; pendingItem: string | number | readonly string[] | undefined; }) => {\n    return (\n        <form \n        onSubmit={props.newItemSubmitHandler}\n        className=\"todoInput\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          onChange={props.handleItemInput}\n          value={props.pendingItem}\n          placeholder=\"Add an item\"\n      />\n      <button type=\"submit\" name=\"submit\" value=\"submit\">\n        add\n      </button>\n    </form>\n  );\n};\n\nexport default InputField;\n\n\n// const [input, setInput] = useState('');\n// const [tasks, setTasks] = useState([]);\n// // functions are usually camel cased in JS\n// // and you shouldnt name the parameter input, when theres another variable called input               \n// function handleNewTaskInput(newInput: string) {\n//     setInput(newInput);\n// }\n// function handleNewTask() {\n//     // you wanna use a immutable array method like .concat which returns a new array\n//     // you should always pass new values to state updaters\n//     setTasks(tasks.concat(input));\n//     // this is going to log the old array before you updated it\n//     // since state updates in react dont happen immediately \n//     console.log(tasks); \n// }"]},"metadata":{},"sourceType":"module"}